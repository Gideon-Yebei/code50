sort1 uses: bubble sort

random5000.txt
real    0m0.077s
user    0m0.038s
sys     0m0.024s

random10000.txt
real    0m0.240s
user    0m0.146s
sys     0m0.058s

random50000.txt
real    0m19.256s
user    0m5.001s
sys     0m0.287s

How do you know?:

Execution time increases significantly with the input size, consistent with O(n^2) time complexity, which is typical for bubble sort.
This suggests that sort1 is likely using bubble sort.

sort2 uses: merge sort

random5000.txt
real    0m0.031s
user    0m0.005s
sys     0m0.026s

random10000.txt
real    0m0.072s
user    0m0.016s
sys     0m0.044s

random50000.txt
real    0m15.134s
user    0m0.018s
sys     0m0.261s

How do you know?:

Execution time increases moderately with the input size, consistent with O(n log n).
This suggests that sort2 is likely using merge sort.

sort3 uses: selection sort

random5000.txt
real    0m0.048s
user    0m0.022s
sys     0m0.026s

random10000.txt
real    0m0.148s
user    0m0.066s
sys     0m0.062s

random50000.txt
real    0m15.323s
user    0m1.759s
sys     0m0.268s

How do you know?:

Execution time increases moderately with the input size, consistent with O(n^2).
This also suggests that sort3 is likely using selection sort.
